<?php

use Drupal\node\Entity\Node;
use Drupal\Component\Utility\Unicode;
use \Drupal\Core\Entity\EntityInterface;
use \Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Controller\ControllerBase;
use Drupal\field_collection\Entity\FieldCollectionItem;

use Drupal\Core\Form\FormStateInterface;
use Symfony\Component\HttpFoundation\Request;

use Drupal\Core\Url;
use Drupal\Core\Link;



function gnfac_d8_form_alter(array &$form, FormStateInterface &$form_state, $form_id){
	///////////
	if ( isset($form['field_latitude']) ){
		$form['field-google-map'] = array( '#type' => 'markup', '#markup'=> '<div id="google-map"></div>' , '#weight' => 3);
		$form['#attached']['library'][] = 'gnfac_d8/gnfac-geographic';
	}
	
	if ( isset($form['field_regions_similar']) ){
		$form['#attached']['library'][] = 'gnfac_d8/gnfac-forms';
		
		
	}
	switch ( $form_id){
		
		case 'node_advisory_edit_form':
		case 'node_advisory_form':
		$unset_list = array();
		  foreach ( $form['field_region_group_1']['widget'] as $key => $region_group ){
		  	if ( is_numeric($key)){
		      $form['field_region_group_1']['widget'][$key]['field_regional_discussion']['widget'][0]['summary']['#title'] = "Bottom Line ( used on the region conditions pages )";
		      $form['field_region_group_1']['widget'][$key]['field_regional_discussion']['widget'][0]['summary']['#description'] = 'Used on the region conditions pages.';
					$form['field_region_group_1']['widget'][$key]['field_regional_discussion']['widget'][0]['summary']['#weight'] = '1' ;
					foreach ( $region_group['field_applicable_regions']['widget']['#default_value'] as $region ){
						// If a region has been chosen in one of the previous field collection items, don't display the checkbox as an 'applicable Region' in the newest region group
						foreach ( $form['field_region_group_1']['widget'] as $key2 => $region_group2 ){
							if ( ($key2 <> $key) && is_numeric($key2)){
								unset($form['field_region_group_1']['widget'][$key2]['field_applicable_regions']['widget']['#options'][$region]);
							}						
						}
					}		
				}
	    }		
 
			
		break;
		case 'node_snow_observation_form':
      foreach (array_keys($form['actions']) as $action) {
         if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
             $form['actions'][$action]['#submit'][] = 'gnfac_d8_snow_obs_form_submit';
         }
      }
			//kint($form);
		break;
		case 'node_page_edit_form':
    $node = \Drupal::routeMatch()->getParameter('node');
		//kint($node);
		if ($node->nid->value == '12087' ){ // this is the NWS Avalanche Warning page , /data/noaa.txt
      foreach (array_keys($form['actions']) as $action) {
         if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
					 $form['actions'][$action]['#submit'][] = 'gnfac_d8_write_noaa_warning_file';
         }
      }
	  }
		break;
		
		//  Using hook_form_alter on this exposed view default value is abandoned in favor of admin GUI solution
		//
		case 'views_exposed_form':
		if ( isset($form['field_advisory_year_target_id']) && $form['field_advisory_year_target_id']['#default_value'] == 'All'){
			foreach ( $form['field_advisory_year_target_id']['#options'] as $key => $option ){
				if ( $key > gnfac_current_year() ) unset( $form['field_advisory_year_target_id']['#options'][$key]);
			}
		}		
		break;
			
	}	
  if ( isset($form['field_advisory_year']) ){

		if ( ! $form['field_advisory_year']['widget']['#default_value']  ){
			$form['field_advisory_year']['widget']['#default_value'] = gnfac_current_year(); 
		}
		
  } 
	return $form;
}

function gnfac_display_video($vid_string = NULL , $format = 'default'){
	switch ( $format){  
		case 'image':
		case 'large':
		  $width = '420px';
		  $height = ' 338px';
		break;
		case 'medium':
	    $width = '330px';
	    $height = ' 266px';
			break;
		default:
	    $width = '100%' ;
	    $height = 'auto';
		break;
  }
	$output = "";
  if ($vid_string && $format <> 'image') {
		$output .=  '<div class="gnfac_attached_video" >';
		$output .= '<object data="https://www.youtube.com/embed'. $vid_string . '" width="' . $width . '" height="' . $height . '"></object>';
		$output .= '</div>';
  }elseif( $vid_string){
  	$output .= '<div class ="gnfac_attached_vid_image" style = "max-width: 300px;">
			<a href = "https://www.youtube.com/watch?v='. substr($vid_string, 1 ) . '" target = "_blank">
			<img src = "https://i.ytimg.com/vi'. $vid_string . '/0.jpg"  width ="275px" />
			</a></div>';
		
		
  }
	return $output;

}

/**
 *   Mail snow obs results
 */
function gnfac_d8_snow_obs_form_submit($form, $form_state){
	gnfac_d8_extracted_mailer($form, $form_state);
	return;
	
 
}

function gnfac_d8_write_noaa_warning_file($form, $form_state){
	//$pre_body = $form_state->getValue('body');
	$title = $form_state->getValue('title');
	$title_text = $title[0]['value'];
	
	$body = $form_state->getValue('body');
	$body_text = $body[0]['value'];
	
	$noaa_data_file = fopen(DRUPAL_ROOT.'/data/noaa.txt', 'w');
	fwrite ($noaa_data_file, $title_text . '
'.$body_text );
	fclose($noaa_data_file);
	return;
	
}

function gnfac_d8_extracted_mailer($form,$form_state){
	  //\Drupal::logger('gnfac_d8')->info();
		$name = $form_state->getValue('field_name');
		$full_name = $name[0]['value'];
	  $to = 'mtavalanche@gmail.com,jimurl@mtavalanche.com';
	  $subject = 'New Snow Obs from: '.$full_name;
	  $message = 'New Snow Observation from: '.$full_name. "\r\n";
		
		$pre_body = $form_state->getValue('body');
		$pre_replyto = $form_state->getValue('field_email');
    $pre_activity = $form_state->getValue('field_activity');
		$pre_city = $form_state->getValue('field_citystatezip');
		$pre_date = $form_state->getValue('field_date');
		$pre_location = $form_state->getValue('field_location');
		$pre_lat = $form_state->getValue('field_latitude');
		$pre_long = $form_state->getValue('field_longitude');
		$pre_phone = $form_state->getValue('field_phone');
		
		$message .= '<b>Activity:</b> '. $pre_activity[0]['value']. "\r\n";
		$message .= '<b>City,State,Zip:</b> '. $pre_city[0]['value']. "\r\n";
		$message .= '<b>Date:</b> '. $pre_date[0]['value']. "\r\n";
		$message .= '<b>Location:</b> '. $pre_location[0]['value']. "\r\n";
		$message .= '<b>Latitude:</b> '. $pre_lat[0]['value']. "\r\n";
		$message .= '<b>Longitue:</b> '. $pre_long[0]['value']. "\r\n";
		$attachments = '';
		
		$message .= '<b>Snow Observations:</b> ' . $pre_body[0]['value']. "\r\n";
		$replyto = $pre_replyto[0]['value'] ? $pre_replyto[0]['value'] : 'advisory@mtavalanche.com';
	
		// Attach the attachments!
		$attached_files = $form_state->getValue('field_file_upload') ;
		$random_hash = md5(date('r', time())); 
		
		foreach ($attached_files as $attached_file ){
			if ( $attached_file['fids']){
        $file = \Drupal\file\Entity\File::load($attached_file['fids'][0]);
        $file_relpath = $file->getFileUri() ;
				$message .= file_create_url($file_relpath) . "\r\n";
				$attachments .= "--PHP-mixed-".$random_hash. "\r\n"; 
				$attachments .= "Content-Type: " .$file->getMimeType() . "; name=".$file->getFilename(). "\r\n";
        $attachments .= "Content-Transfer-Encoding: base64". "\r\n";
        $attachments .= "Content-Disposition: attachment"."\r\n";
        $attachments .= "filename = ".$file->getFilename(). "\r\n";
				$attachments .= chunk_split(base64_encode(file_get_contents(DRUPAL_ROOT.'/sites/default/files/'.str_replace( 'public://', '' ,$file_relpath ) )));
			}
		}


	//create a boundary string. It must be unique
	//so we use the MD5 algorithm to generate a random hash
	//add boundary string and mime type specification


	  $additional_headers = 'From: mtavalanche@gmail.com'. "\r\n";
		$additional_headers .= 'Reply-To: '.$replyto. "\r\n";
		$additional_headers .= "MIME-Version: 1.0" . "\r\n";
	$additional_headers .= "Content-Type: multipart/mixed;
	 boundary=\"PHP-mixed-".$random_hash."\"". "\r\n"; //boundary=PHP-mixed-".$random_hash;

	ob_start(); //Turn on output buffering
	?>
--PHP-mixed-<?php echo $random_hash. "\r\n"; ?>
Content-Type: multipart/alternative; boundary="PHP-alt-<?php echo $random_hash; ?>" 

--PHP-alt-<?php echo $random_hash. "\r\n"; ?>
Content-Type: text/plain; charset=iso-8859-1
Content-Transfer-Encoding: 7bit

<?php echo $message; ?>

--PHP-alt-<?php echo $random_hash. "\r\n"; ?>
Content-Type: text/html; charset=iso-8859-1
Content-Transfer-Encoding: 7bit
<html><body>
<?php 
echo check_markup($message, 'restricted_html'); 
?>
</body>
</html>
--PHP-alt-<?php echo $random_hash; ?>--

<?php echo $attachments; ?>
--PHP-mixed-<?php echo $random_hash; ?>--

<?
	//copy current buffer contents into $message variable and delete current output buffer
	$final_message = ob_get_clean();
	  $result = mail (  $to ,  $subject ,  $final_message ,  $additional_headers  );
	   //echo ("Mail was sent? ". $result);

	
}

// doesn't work on : https://youtu.be/Li3HXtc6P3E
function gnfac_video_extract_string($video_url){
  $video_url_final = ( strpos($video_url , 'watch?v=' )  ) ? '/'.substr( $video_url , strpos($video_url , 'watch?v=' )+8 ) : $video_url;	
  $video_url_final2 = strpos($video_url_final, '&') ? substr($video_url_final , 0, strpos($video_url_final, '&')) : $video_url_final;
  $video_url_final3 = (strpos($video_url_final2, 'https://youtu.be/') === 0) ? substr( $video_url_final2 , 16 ) : $video_url_final2 ;
  $video_url_final4 = (strpos($video_url_final3, 'http://youtu.be/') === 0) ? substr( $video_url_final3 , 15 ) : $video_url_final3 ;
	
	return $video_url_final4 ;
}


function gnfac_current_advisory($format='nid'){
	$current_advisory_sql = "SELECT n.nid FROM node as n 
		join `node_field_data` as nfd on (n.nid=nfd.nid AND n.vid=nfd.vid) 
	  WHERE nfd.status = 1 and n.type = 'advisory' 
		ORDER BY created DESC LIMIT 1 ";
		$results = db_query($current_advisory_sql);
		
		foreach( $results as $result){
		$node = Drupal\node\Entity\Node::load($result->nid);
		$nid = $result->nid;
	}
	if ( $format == 'node'){
		return $node;
	}else{
		return $nid;
	}
}

/**
 * Implements hook_field_extra_fields().
 */
function gnfac_d8_entity_extra_field_info() {
  // Put the content type you want to display summary field here.
  $extra['node']['advisory']['display']['body_summary'] = array(
    'label' => t('Body summary'),
    'description' => t('Display body summary.'),
		'weight' => 0,
  );
	$extra['node']['image']['display']['image_sizes_links'] = array(
		'label' => t('Other Image sizes'),
		'description' => t('Image Sizes'),
		'weight' => 0,		
	);
	//dsm($extra);
  return $extra;
}

function gnfac_d8_field_collection_item_view_alter(&$build, $entity, $display) {

}

function gnfac_d8_page_attachments(array &$attachments) {
	
  $attachments['#attached']['library'][] = 'gnfac_d8/gnfac-libraries';
	
}



/**
 * Implements hook_node_view().
 */

function gnfac_d8_node_view_alter(&$build, $entity, $display ) {
  // Put the content type you want to display summary field here.
  $content_type = 'advisory';
	//dsm($node->field_region_group_1->getValue());


	if ($display->getComponent('body_summary')) {
		//kint ( $entity->get('field_region_group_1'));
	  //kint ($region_groups);
		$region_groups = array();
		$fc_ids = array();
		$markup = '';
		
    $markup = gnfac_d8_compile_regions($entity);

      $build['_field_layout']['content']['body_summary'] = [
        '#type' => 'markup',
				'#prefix' => '<div class ="discussion"><div class = "field__label">Snowpack and Avalanche Discussion</div>',
				'#suffix' => '<div><ul class = "button-list"><li><a href ="/node/add/snow_observation">Submit Snow Observations</a></li></ul></div>'.'</div>',
        '#children' => $markup, 
				'#weight' => 2,
      ];
		
	}
	
	if ( $display-> getComponent('field_weather') ){
		
		$full_weather_link = '<div class = "full-weather-wrapper "><ul class = "full-weather button-list"><li class= "full-weather-item"><a href = "/weather/wx-avalanche-log">Weather and Avalanche Log</a></li></ul></div> ';
		//kint($build['_field_layout']['content']['field_weather']);
		$build['_field_layout']['content']['field_weather'][0]['#text'] = $build['_field_layout']['content']['field_weather'][0]['#text'] .$full_weather_link;
	}
	/*if ( $display->getComponent('image_sizes_links')) {
		$build['field_layout']['content']['image_sizes_links'] = [
			'#type' => 'markup',
			'#prefix' => '<div class ="sizes-links">Images size:',
			'#suffix' => '</div>',
			'#children' => '<ul> <li>small</li><li>medium</li></ul>',
			'#weight' => 5,			
		];
		
	}*/

}

function gnfac_d8_link_alter(&$variables) {
  if ($variables['url']->isExternal()) {
    $variables['options']['attributes'] = ['target' => '_blank'];
  }
}
//
// $format can be 'web' or 'email' , depending on if the stykles will also be written inline
//


function gnfac_d8_compile_regions($entity, $format = 'web'){
	$markup = '';
	if ( $format == 'email'){
	  $h3_styles = ' style = "display: inline-block;	margin: 0;	vertical-align: top; padding: 5px 7px" ';
	  $haz_image_wrapper_style = ' style = "display:inline-block;" ';
		$warning_styles = '';
		$region_group_styles = ' style = "background: #617490; margin-top: 35px; border-top: 4px solid #162f50; color: #fafafa;" ';
		$haz_image_styles = ' style = "height: 32px; padding-left: 4px" ';
		$haz_image_elements = ' height = "32px" ';
		//$mountain_weather_styles = ' style = "" ';
	}
	foreach ($entity->get('field_region_group_1') as $key => $region ){
		//kint($region);
    $fc_ids[$key] = $region->getValue()	;		
		$fc = FieldCollectionItem::load($fc_ids[$key]['value']);
		$fc_regions = $fc->field_applicable_regions->getValue();
		$fc_details = $fc->field_regional_discussion->getValue() ; 
		$fc_hazard = $fc->field_regional_hazard_rating->value;
		$fc_warning = $fc->field_avalanche_warning->value ? ' warning' : '' ;
		$markup .= '<div class = "region-group" '. $fc_warning . $region_group_styles. ' > ';
		$fc_haz_image = '';
		if ( $fc_hazard  ){ 
			$fc_haz_image = '<div class = "region hazard-rating-image" '. $haz_image_wrapper_style .'><a href ="#" title = "'. $fc_hazard .' Avalanche Hazard" alt ="'. $fc_hazard .' Avalanche Hazard"><img src ="/images/hazard_ratings/simple/' .  $fc_hazard .'.png" class = "hazard-image-main" '.$haz_image_styles. $haz_image_elements.'  /></a><br />';
			//$fc_haz_image .= '<span class = "small">'. $fc_hazard .'</span>'; // this adds the text, hopefully not needed.
			$fc_haz_image .= "</div>";
		}
		
			$markup .=  $fc_haz_image. '<h3 class ="region" '. $h3_styles .' >' . implode ( '</h3><h3 class ="region" '. $h3_styles.'>' , gnfac_region_groups_header_markup($fc_regions) ) .'</h3>';
		$markup .= '</div>';	
		if ( $fc_warning == ' warning' ){ $markup .= '<h3 class = "warning" '.$warning_styles.'>Avalanche Warning</h3>';}
		// 
	  $text_content = [
	    '#type' => 'processed_text',
	    '#text' => $fc_details[0]['value'],
	    '#format' => $fc_details[0]['format'],
	  ];
	  $markup .= \Drupal::service('renderer')->renderPlain($text_content);
	
	}
	return $markup;
}

function gnfac_style_h3($string){
	$result = preg_replace('/([.\n\r]*)<h3>([.\n\r]*)/', '$1<h3 style = "background-color: #617490;
	    color: #fafafa;
	    padding-left: 5px;
	    padding: 3px 6px;
	    border-top: 5px solid #162f50;
			margin-bottom:0;
			margin-top: .1rem;
			font-weight: lighter;
			font-size: 1.1 rem;
			text-align: left;" >$2', $string );
	return $result;
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */

function gnfac_theme_preprocess_block(&$vars) {	
  if($vars['derivative_plugin_id'] == '795132e8-5881-4429-80b0-4e23ca037aac' ||  // this is the uuid of the 'Advisory select' block - a JS chooser for date of archived advisory
	  $vars['derivative_plugin_id'] == '1c0c3c56-b77c-43f1-ac8f-f15df54c3376' ||  // this is the uuid of the 'Map View' block - appears on images, videos, accidents, etc.
 		$vars['derivative_plugin_id'] == '7da81287-f520-4f89-abbe-71e76e8b6aab'		) { //this is the uuid of the SNOTEL data table block
    //-- This stops the block being cache in drupal 8
    $vars['#cache']['max-age'] = 0;
  }
}
//
//  This function was supposed to 'null out' certain links, but it doesn't work, its for D7
//
/*
function gnfac_theme_menu_link(array $variables) {
  $element = $variables['element'];
  $sub_menu = '';
  // Menu links with id's included in this array will get muted
  $muted_mlids = array(577, 578, 579);
	kint ( $element);
  if (in_array($element['#original_link']['mlid'], $muted_mlids)) {
    // Get it pointing to the current page
    $element['#href'] = current_path();
    // Ideally should just use an empty fragment, but Drupal ignores it if set like that
    $element['#localized_options']['fragment'] = 'none';
  }

  if ($element['#below']) {
    $sub_menu = drupal_render($element['#below']);
  }
  $output = l($element['#title'], $element['#href'], $element['#localized_options']);
  return '' . $output . $sub_menu . "\n";
}
*/


function gnfac_region_groups_header_markup($region_group){
	$terms = \Drupal::entityManager()->getStorage('taxonomy_term')->loadTree('advisory_region');
	$region_names = array();
	foreach ($terms as $term) {
		$region_names[$term->tid] = $term->name ;
	}
	
	foreach($region_group as $region ){
	  $group[$region['target_id']] = $region_names[$region['target_id']];
	}
	$markup = array();
	
	/// all Regions
	if (count ($group) == 7) {
		$markup[] = "All Regions";
		foreach( $group as $key => $region){
			unset ($group[$key]);
		}
	}
	
	if( isset($group) && in_array (26 , array_keys($group)) && in_array( 24, array_keys($group))  ){
		$link_url = Url::fromUri( 'internal:/advisory/northern-madison' );
		$link_options = array ( 'attributes' => array( 'class' => array('test-class') , 'style' => 'color: #fafafa;') );
		$link_url->setOptions($link_options);	
		$linked_region = Link::fromTextAndUrl( t('Madison Range'), $link_url );
		$linked_region = $linked_region->toRenderable();
		$markup[] = render($linked_region) ;  
		unset( $group[26]); unset ( $group[24]); 
	}
	
	
	if( in_array (25 , array_keys($group)) && in_array( 27, array_keys($group))  ){
		$link_url = Url::fromUri( 'internal:/advisory/northern-gallatin' ) ;
		$link_options = array ( 'attributes' => array( 'class' => array('test-class') , 'style' => 'color: #fafafa;') );
		$link_url->setOptions($link_options);	
		
		$linked_region = Link::fromTextAndUrl( t('Gallatin Range'), $link_url);
		$linked_region = $linked_region->toRenderable();
		$markup[] = render($linked_region) ;  
		unset( $group[25]); unset ( $group[27]); 
	}
	
	foreach( $group as $region){
		$link_url = Url::fromUri( 'internal:'.gnfac_region_links($region) );
		$link_options = array ( 'attributes' => array( 'class' => array('test-class') , 'style' => 'color: #fafafa;') );
		$link_url->setOptions($link_options);
		$linked_region = Link::fromTextAndUrl( t($region), $link_url );
		$linked_region = $linked_region->toRenderable();
		$markup[] = render($linked_region) ;  
	}
	return $markup;
	
}

function gnfac_region_links($region){
	switch($region){
		case 'Bridger Range':
		  $url = '/advisory/bridgers';
		break;
		case 'Northern Gallatin':
		  $url = '/advisory/northern-gallatin';
		break;
		case 'Southern Gallatin':
  		$url = '/advisory/southern-gallatin';
		break;	
		case 'Liohead Range':
		  $url = '/advisory/lionhead';
		break;
		case 'Southern Madison':
			$url = '/advisory/southern-madison';
		break;
		case 'Northern Madison':
		  $url = '/advisory/northern-madison';  
		break;
		case 'Cooke City':
		  $url = '/advisory/cooke-city';
		break;
		default:
		  $url = '/advisory/bridgers';
	}
	
	return $url;
	
	
	
}

function gnfac_fetch_nrcs_snotel_data($snotel_id = NULL,$data_only = FALSE){
	if ( !$snotel_id ){
    $node = \Drupal::routeMatch()->getParameter('node');
    $snotel_id =  $node->field_nrcs_snotel_site->value;
  }
	$url = 'https://wcc.sc.egov.usda.gov/reportGenerator/view_csv/customSingleStationReport/hourly/'. $snotel_id .':MT:SNTL|id=%22%22|name/-167,0/WTEQ::value,SNWD::value,PREC::value,TOBS::value';

	$Data = file_get_contents($url);
	$tblrows = explode("\n", $Data);

	$header_trigger = FALSE; $count = 0;
	foreach ($tblrows as $tbldatas){
	  if ((substr( $tbldatas , 0 , 1 ) <> '#') && !strpos( $tbldatas, '-------' )){
	    if ( !$header_trigger ){ $header = explode (',' , $tbldatas); $header_trigger = TRUE; 
	  	}elseif ($tbldatas != NULL){
	  		$tbldata = explode( ',' , $tbldatas );
		  	$tbldata[0] = date('Y-m-j G:i', strtotime($tbldata[0] )+60*60*1 ); // this would be the place to add 'gnfac_dattime add one hour'
	  	  $rows[] = $tbldata;
	    }
	  }else{ // figure out the header items, station name and elev
	    switch ($count){
	      case '0':
	        $station_name = substr( $tbldatas , 2 );
	      case '1':
	        $station_elev = substr( $tbldatas , 2); 
	    }
	    $count ++;
	  }
	}
	if (count($rows > 50)) $rows = array_slice($rows, -50); 
	
	$rows = array_reverse($rows);
	
	if ( !$data_only ){
		
	  $attributes['id'] = 'nrcstabdata';
	  print_r('<a href ="#nrcstblbottom">Jump to table bottom</a>'
      ); 
		  $variables = array( '#type' => 'table',
		    '#header' => $header,
	      '#rows' => $rows,
	      '#attributes' => $attributes,
			  '#sticky' => TRUE,
	    );
		print (drupal_render( 	  $variables ));
	  print_r( "<div class = 'nrcstblbottom'><a href ='#' name = 'nrcstblbottom'></a></div>");
  }else{
		return $rows;
	}
}

function gnfac_fetch_hobo_file($station, $path = NULL, $transforms = NULL , $data_only = FALSE){
	if ( !$path ){
	   $node = \Drupal::routeMatch()->getParameter('node');
		 $path = $node->field_data_garrison_id->value;
	}
	$Data = file_get_contents('https://datagarrison.com/users/300034012539980/'. $path  .'/temp/'.$path.'_live.txt');
	$tblrows = explode("\n", $Data);

	$header = array('Date', 'Time',t('Temperature<br/> deg F') , 'RH, %', 'Wind Speed', 'Wind Gust' , 'Wind Direction');
	$rows = array();
	$count = 0;
	foreach ($tblrows as $tblrow){
	  $data_row_array = preg_split('/[\s]+/', $tblrow );
		if ($count >= 3 && $data_row_array[1] != '' && !preg_match( '/^[a-zA-Z]/', $tblrow )){
			$data_row[0] =$data_row_array[0];
			
			if ( $station <> 'hyalite2'){
			  $data_row[1] = substr($data_row_array[1],0,5 );
			  $data_row[2] = number_format($data_row_array[2], 1 );
			  $data_row[3] = number_format($data_row_array[3], 0 );
			  $data_row[4] = number_format($data_row_array[4], 0 );
			  $data_row[5] = number_format($data_row_array[5], 0 );
			  $data_row[6] = gnfac_cardinal_wind_dir($data_row_array[6]);
		  }else{
				
			  $data_row[1] = substr($data_row_array[1],0,5 );
			  $data_row[2] = number_format($data_row_array[5], 1 );
			  $data_row[3] = number_format($data_row_array[6], 0 );
			  $data_row[4] = number_format($data_row_array[2], 0 );
			  $data_row[5] = number_format($data_row_array[3], 0 );
			  $data_row[6] = gnfac_cardinal_wind_dir($data_row_array[4]);
				
		  }
			
			$rows[] = $data_row;
		  //var_dump($data_row_array);
			
		}
		$count++;
	}
	
	if (count($rows > 50)) $rows = array_slice($rows, -50); 
  $rows = array_reverse($rows);
	$attributes['id'] = 'skiarea_tabdata';
	
	//$attributes['style'] = "max-height: 450px;"; // Can put other attributes here as needed
	//print_r( "<center><h4>".$station_name .
	//       "</h4>" . "</center>".
	
	if ( $data_only == FALSE ){
	  print_r('<a href ="#nrcstblbottom">Jump to table bottom</a>
		  '); 
	  $variables = array( 
			'#type' => 'table',
	    '#header' => $header,
      '#rows' => $rows,
	    '#attributes' => $attributes,
		  '#sticky' => TRUE,
    );
	  print (drupal_render( 	  $variables ));
	  //print_r( theme( 'table', array( 'header' => $header, 'rows' => $rows, 'attributes'=> $attributes )) );
    print_r('<a name ="nrcstblbottom" class ="nrcstblbottom">.</a>');
	}else{
		return $rows;
	}
}

/*
//  function gnfac_fetch_rpt_file
		params: 
			$path - string, a full local path, or a publicly accessible http:// url where the RPT file lies

			$offsets - a array in which the keys are the column numbers and the
				 values column number  at the end of x column. 

			$transforms - an array of transformations to take on the raw data. the key is the column number
										and the value (if a string) is the name of the function that should process the raw data value.
										for example $transforms = array( '5' => 'gnfac_cardinal_wind' )
*/

function gnfac_fetch_rpt_file($path, $offsets, $transforms = NULL, $truncate = FALSE, $data_only = FALSE){
  if ( !is_array($offsets)) return;
	$Data = @file_get_contents($path);
	if ($Data === FALSE ){
		drupal_set_message('A needed weather data file could not be found: '. $path, WARNING);
		return;
	}else{

	$tblrows = explode("\n", $Data);
  $header = array();
	$rows = array();
	if ($truncate) { unset ($tblrows[0]);  unset ($tblrows[1]); $tblrows = array_slice($tblrows, 0 , -4);}
	foreach ($tblrows as $tblrow){
//print_r("length value: ".strlen($tblrow));
//kint($tblrow);
		if (strlen($tblrow) > ($offsets[count($offsets)-2 ]) // it is a genuinely long row, not spaces or header
		  && !strstr($tblrow, '------------')/*does not have a bunch of dashes*/ ){
			
  $data_row_array = _rpt_split_rows($tblrow , $offsets);
//var_dump($data_row_array);
				if( countDigits($tblrow) < 7 ){
					foreach($data_row_array as $key => $header_item ){
						$header[$key] .= ' ';
						if ( trim($header_item) && (!strstr( $header[$key] , trim($header_item) ) )   ){
					  	$header[$key] .= trim($header_item) ;
					  }
          }
				}else/* this is a data row, lotsa numbers */{
					if ( $transforms ){
						foreach($transforms as $key => $transform){
							$data_row_array[$key] = $transform(floatval($data_row_array[$key]));
						}
					}
					$rows[]['data'] = $data_row_array;
					
				}
			}
		}
	}
	if (count($rows > 50)) $rows = array_slice($rows, -50); 
  $rows = array_reverse($rows);
	$attributes['id'] = 'skiarea_tabdata';
	//$attributes['style'] = "max-height: 450px;"; // Can put other attributes here as needed
	//var_dump ($rows);
	//print_r( "<center><h4>".$station_name .
	//       "</h4>" . "</center>".
	if ( $data_only == FALSE ){
	print_r('<a href ="#nrcstblbottom">Jump to table bottom</a>'
    ); 
		$variables = array( 
			'#type' => 'table',
		  '#header' => $header,
	    '#rows' => $rows,
	    '#attributes' => $attributes,
		  '#sticky' => TRUE,
	  );
		print (drupal_render( 	  $variables ));
    print_r('<a name ="nrcstblbottom" class ="nrcstblbottom">.</a>');
	}else{
		return $rows;
	}
}

function gnfac_num_format_2($value){
	if ( $value){
  	return number_format($value, 2);
	}
}


//
//    Two helper functions here
//

function _rpt_split_rows($row, $offsets){
	//drupal_set_message( var_export($offsets, TRUE) );
	foreach($offsets as $key => $offset){
		$start = ($key == 0) ? 0 : $offsets[$key - 1 ];
		$array[$key] = substr($row, $start , $offsets[$key] - $start);
	}
	
	return $array;
}

function countDigits( $str )
{
    return preg_match_all( "/[0-9]/", $str , $out);
}


function gnfac_cardinal_wind_dir($degrees){
	if (!is_numeric($degrees)) return;
	switch (true){
		
		case ($degrees >= 360-22.5 || $degrees < 22.5): $card = 'N'; break; 
		case ($degrees >=22.5 && $degrees < 67.5 ): $card = 'NE'; break;
		case ($degrees >=67.5 && $degrees < 112.5): $card = 'E'; break;
		case ($degrees >=112.5 && $degrees < 157.5): $card = 'SE'; break;
		case ($degrees >=157.5 && $degrees < 202.5): $card = 'S'; break;
		case ($degrees >=202.5 && $degrees < 247.5): $card = 'SW'; break;
		case ($degrees >= 247.5 && $degrees < 292.5): $card = 'W'; break;
		case ($degrees >=292.5 && $degrees < 337.5): $card ='NW'; break;
	
	
	}
	return $card . " - ". number_format($degrees, 0);
}

function avy_wx_charts_nrcs_block_view(){

	$node = \Drupal::routeMatch()->getParameter('node');
	$terms_array = array() ; //taxonomy_node_get_terms_by_vocabulary($node, '8');
	
	if (isset($node->field_nrcs_snotel_site->value) 
			&& $node->type->target_id == 'weather_station' 
			&& $node->field_weather_station_type->target_id == '434' )
	    {return TRUE;}else{
	     return FALSE;
	    }

	
	
}

function gnfac_current_year(){
	$year_minus_six_months = date('y', time() -  6*30*24*3600);
	$tid_year = $year_minus_six_months > 19 ?  $year_minus_six_months + 418 : $year_minus_six_months + 25 ;
	
	return (string) $tid_year;
}


function gnfac_sharing_links($node){
	$alias = \Drupal::service('path.alias_manager')->getAliasByPath('/node/'.$node->nid->value);
	?><div class="share_container">
		<span class='fb_share'><a href = "https://www.facebook.com/sharer/sharer.php?u=<?php echo "https://www.mtavalanche.com/".$alias; ?>" target="_blank" title = "Share via Facebook"><img src="/sites/all/themes/gnfac_theme/images/icons/facebook_32.png" /></a></span>
		
		<span class='twitter_share'><a href = "https://twitter.com/intent/tweet?text=<?php echo $node->title->value; ?>&via=AvalancheGuys&url=<?php echo "https://www.mtavalanche.com/".$alias; ?>" target ="_blank"><img src="/sites/all/themes/gnfac_theme/images/icons/twitter_32.png" title = "Tweet this page" /></a></span>
		
<span class='instagram'><a href = "https://instagram.com/mtavalanche/" target ="_blank"><img src="/sites/all/themes/gnfac_theme/images/icons/instagram_32.png" title = "View MT Avalanche photo stream" /></a></span>
<span class='mail'><a href = "mailto:?subject=Avalanche Center Image or Photo" target ="_blank"><img src="/sites/all/themes/gnfac_theme/images/icons/email-black-sm.png" title = "Email this item" /></a></span>	
	
	</div>
	<?php 
}

